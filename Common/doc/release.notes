** @file release.notes
 * Package Common
 * Coordinator: Luca Baldini <luca.baldini@pi.infn.it>
 *
 *                  EOH


- Some minor code refactoring which turned to be handy for a little tool
to convert a CAL channel number (in the data monitoring conventions) into
its physical location (i.e. tower, layer, etc). No change in any of the
functionalities.
- Some improvements in the debug printouts.


 Common-06-01-01 22-Sep-2009 lbaldini Improvement in the calculation of the badness in the alarm handler.
- Some more improment in the calculation of the badness in pAlarmLimits.py.
In the completely degenerate case in which all the four limits coincide
the badness is no longer set to ERROR_BADNESS + DELTA_BADNESS, as it used to
be. Rather, an additional constant, proportional to the distance between the
(best) value and  the center of the interval (possibly weighted with the
error) is added in such a way the sorting (badness-wise) between the data
points is preserved (i.e. the they don't have all the same badness, but
rather worts is labeled as worst).
- Some more comments added.


 Common-06-01-00 22-Sep-2009 lbaldini Bug fix in the alarm handler.
- Bug fix in how the alarm limits are handled. The issue was the case in which
all the four limits were identical and the actual value was outside the
limits themselves. A similar issue was documented and fixed in jira GDQMQ-272
and fixed, but I missed one of the cases in the logic (now the code looks
perfectly simmetric).
* Relevant jira(s): GDQMQ-272


 Common-06-00-01 05-Aug-2009 bregeon upgrade to v6r0p1 - first stag tag as 06-00-01
*** v6r0p1 ***
- just add necessary stuff for stag/SCons


*** v6r0p0 ***
- Added -s option to pOptionParser to pass to the xml file with the
SAA definition to dataMonitoring/FastMon/pDataProcessor.py (necessary for the
plot of the distance to the SAA).
* Relevant jira(s): GDQMQ-311


*** v5r8p0 ***
- One check added in pAlarmBaseAlgorithm.min_entries to prevent the
condition on the minimum number of entries to be applied on TBranches (i.e.
trending plots). This condition only makes sense for histogram, as in the case
of trending plots the number of data points has in principle nothing to do
with the statistics (tkrtrend plots, for instance, have exactly one entry
by definition).


*** v5r7p0 ***
- Bug fix in the alarm handler (the output status was not correctly overridded
under some circumstances).
* Relevant jira(s): GDQMQ-297


*** v5r6p0 ***
- Output status for alg__low_high_ratio set to ERROR when the pivot point is
not defined.
- Output status for alg__reference_histogram set to ERROR in case any
problem is encountered while running the algorithm.
- pAlarmBaseAlgorithm modified in such a way the output status for all the
alarms is set to ERROR in case the root object is invalid.
* Relevant jira(s): GDQMQ-293 


*** v5r5p0 ***
- Doxygen documentation added to alg__low_high_ratio.py.
* Relevant jira(s): GDQMQ-294


*** v5r4p3 ***
- Bug fix (malformed token in the output xml file) in alg__reference_histogram.


*** v5r4p2 ***
- Bug fix (unprotected float division) in alg__low_high_ratio.


*** v5r4p1 ***
- Added new algorithms alg__exponential_lambda and alg__powerlaw_index.


*** v5r4p0 ***
- Added new algorithms alg__y_average and alg__y_rms.
* Relevant jira(s): GDQMQ-289


*** v5r3p0 ***
- Num enrties in all acd/cal analyzers set to the number of events in the run.
* Relevant jira(s): GDQMQ-288


*** v5r2p1 ***
- A very minor change and a fix for a small bug that was preventing a debug
message from being printed out.
- Some more debug messages added.


*** v5r2p0 ***
- Added a common mechanism to set the significance level (i.e. number of sigma
in the alarm output) to issue a warning/error. Added a method to retrieve
th "num_sigma" parameter in the algorithm base class and actual algorithm
implementations modified to use it.


*** v5r1p1 ***
- Bug fix in the generation of the local report without the tables of the
CLEAN alarms (was still writing out the detailed dictionaries and doxygen
was taking a long time). It does not affect the standard use in the pipeline
in which the html report is not generated, but it is useful for debug when run
locally.


*** v5r1p0 ***
- Added distribution of the pedestal mean deviation for pCalPedsAnalyzer.
- Added distribution of the pedestal mean deviation for pAcdPedsAnalyzer.
* Relevant jira(s): GDQMQ-287


*** v5r0p1 ***
- Bug fix in reference histogram algorithm : logging changed to logger


*** v5r0p0 ***
- Command line switch -R added to the alarm handler in order to load into
memory the files containing the reference histograms from a specific directory.
- Alarm handler and reference histogram algorithm modified to load the
reference files at the beginning and use them in the following.
* Relevant jira(s): GDQMQ-281


*** v4r13p1 ***
- More improvements to the output detailed dictionary of the
reference_histogram algorithm.
* Relevant jira(s): GDQMQ-284


*** v4r13p0 ***
- Improved the reference_histogram algorithm. Statistics bug fixed and output
details improved.
* Relevant jira(s): GDQMQ-284


*** v4r12p0 ***
- One more command line switch added to pAlarmHandler not to write the table
of the alarms with the CLEAN status in the output report. It does not affect
the standard use in the pipeline in which the html report is not generated, but
it is useful for debug when run locally.


*** v4r11p1 ***
- Bug fix in the alarm handler. Now it allows multiple alarm sets with the
same name.
* Relevant jira(s): GDQMQ-283


*** v4r11p0 ***
- Bug fix in the alarm handler (plot names were always expanded and matched
against the ones in the root tree, no matter whether the xml config file
contains a wildcard or not).
* Relevant jira(s): GDQMQ-282


*** v4r10p4 ***
- Definitions of plus and minus infinity changed.
< PLUS_INFINITY = 1.e24
< MINUS_INFINITY = -1.e24
---
> PLUS_INFINITY = 1.e10
> MINUS_INFINITY = -1.e10
I realized that, due to rounding problems, the old values were giving the
wrong answer (warning output status instead of error) under certain
circumstances (i.e. one of the limits not explicitely defined in the xml file).
This particular feature is never used so it shouldn't matter, but it seemed
safer to fix it.


*** v4r10p3 ***
- Changed the ranges for some distribution histograms in pCalGainAnalyzer.
Note that the Mean distributions have been left untouched as they would
require too many modifications to be changed for the three ratios
independently and it's not worth it.
* Relevant jira(s): GDQMQ-270


*** v4r10p2 ***
- Improvement in the output dietributions from pAcdPedsAnalyzer.py, where the
zeros from the unphysical tiles have been stripped off.
* Relevant jira(s): GDQMQ-269


*** v4r10p1 ***
- Bug fix in pAlarmLimits.py (couldn't handle the case in which all the
4 limits were set to the same value and the actual value of the measured
point was lying outside). In that case the algorithms now returns a
bedness of ERROR_BADNESS + DELTA_BADNESS (3 in the standard implementation) and
therefore an error is raised.
* Relevant jira(s): GDQMQ-272


*** v4r10p0 ***
- Implemented the reference subtraction in the AcdPedsAnalyzer.
- Implemented the difference wrt the truncated average in pCalGainAnalyzer.
* Relevant jira(s): GDQMQ-265


*** v4r9p0 ***
- Add function LookupErrorCode to Lookup the symbolic name of an error code
in FastMon.
* Relevant jira(s): GDQMQ-257


*** v4r8p3 ***
- New variable in pGloblals to tell FastMon to dump event with an error to
file: FASTMON_DUMP_ERRORS_TO_FILE is set to false, and is used only for
debugging.
* Relevant jira(s): GDQMQ-253


*** v4r8p2 ***
- New attribute "seconds_elapsed" in the FastMon parsed by the pErrorLogger
module.
- New algorithm to normalize the number of errors to the run duration added to
pErrorLogger.


*** v4r8p1 ***
- Minor bug fix: the algorithm alg__values was crashing if for some reason it
was not run (for instance if the plot was missing). Which should never happen,
but... good to be prepared.
- Another bug fix: exception handling correctly implemented in alg__empty_bins.


*** v4r8p0 ***
- Added a new class (pErrorLogger) to apply alarms on the xml output files
from the fastMon error handler and the verify module. The interface is
identical to the one of the alarm handler, with the only difference that 
the new class operates on xml files, rather than root files (ans the
algorithms are obviously different).
Not running into the pipeline, yet.


*** v4r7p0 ***
- Implemented the pedestal deviation in the CAL fitting tool, based on the new
file from David (with the histogram of the pedestal references).


*** v4r6p1 ***
- Number of degrees of freedom and reduced chisuare added to the details dict
for all the algorithms involving fitting.


*** v4r6p0 ***
- Left fitting range changed from 1.5 to 2.5 sigma for LEX8 and HEX8 CAL
pedestals in pCalPedsAnalyzer.py.
- Some minor refactoring in the p*Analyzer classes to allow the derived
classes to add thei own histograms to the ones specified in the base class.
- Added histograms of the mean and rms values wrt the truncated average method
in pCalPedsAnalyzer and pAcdPedsAnalyzer.
- Added placeholders for the pedestal deviations in pCalPedsAnalyzer and
pAcdPedsAnalyzer.


*** v4r5p0 ***
- New alarm algorithm added: alg__low_high_ratio, measuring the ratio---in
terms of number of entries---below and above a given pivot point.
* Relevant jira(s): GDQMQ-26


*** v4r4p0 ***
- All the alarms parameters with a default value (i.e. those which may not be
specified in the xml file) added to the parameters dict of the algorithm so
that they make it to the output xml file.
- Methods to adjust the x range in pAlarmBaseAlgorithm modified to use the
getParameter() method for consistency (this way the min and max parameters
make it to the output xml file).
- All algorithms modified to accept both TH1F and TH1D (and/or TH2F and TH2D
where necessary).
- Test functions for all the algorithms modified as to print out the actual
parameters dict, as it is shipped out to the xml file.
* Relevant jira(s): GDM-133


*** v4r3p0 ***
- Output status promoted to warning (used to be undefined) in the edge finders
if the edege(s) is (are) not found. The idea is that a minimu suitable number
of entries is required before running an alarm on a plot; if the condition is
not met the status is UNDEFINED---no need to bother. This change is intended
to distinguish the cases in which the algorithm is supposed to have enough
ststistics (and hence to find the edge) but it doesn't.


*** v4r2p0 ***
- Bug fix in pBaseAnalyzer: undefined variable when printing the fit parameters
on the screen, was affecting the debug mode only.
- Bug fix in pBaseAnalyzer: the errors bars were not set correctly, there was
an offset of -1.
- Default values for the ACDanalyzer quantites (for the unphysical empty
histograms) set to 0.0 rather than -1.0


*** v4r1p0 ***
- Changed the format for the xml files for the alarm exceptions.
The new format is more flexible and allows to explicitely decide the output
status (either WARNING or ERROR) upon exception violation.
NOTE: the change is not backward compatible with the old configuration file
format. Need datamonitoring/AlarmsCfg v4r4p0.


*** v4r0p0 ***
- Some refactoring in the base class for the alarm algorithm. A new general
method called getFitOutput() has been implemented to replace the old
getFitParameter() and getFitParametes(). It makes easier to implement new
alarms involving fitting.
- Added new base class pGenericFitAlgorithm to deal in a uniform fashion with
all the algorithms involving simple fitting.
- alg__gauss_mean, alg__gauss_rms, alg__gauss_norm, alg__peak_position and
alg__peak_width modified as to use the new method and the new base class.
- pBaseAnalyzer class modifies as to use the new method.


*** v3r10p0 ***
- Implemented a mechanism to link to each alarm on a multidimentional trending
quantity the actual plot that triggered the alarm
* Relevant jira(s): GDQMQ-240


*** v3r9p1 ***
- Added an option to skip a defined set of histogram bins in alg__y_values.py.
Necessary to put alarms on the ACD histograms with the GEM tile id on the
x axis, since we do have bins which do not correspond to physical tiles, there.
* Relevant jira(s): GDQMQ-238


*** v3r9p0 ***
- One more handle implemented for the "values" and the "y_values" algorithms:
multiplicative factor on the error bar of each trending point/bin value that
can be set from the xml file (corresponds to put an alarm at the level of
n sigma). Defaults to one, which was the previous behaviour. This also
allows to put a zero factor which is handy for the digiLong histograms, in
which the errors are wrong, at the moment.


*** v3r8p1 ***
- Minimum TrueTimeInterval for the alg_values increased from 5 to 10 s.
* Relevant jira(s): GDQMQ-226


*** v3r8p0 ***
- Added a utility script to map the alarms on the plots.


*** v3r7p0 ***
- Possibility to select asymmetric fit ranges for the Cal Ped/Gain and the
Acd Ped analyzers implemented.
- Add the correct error bars to the output histograms of the Cal Ped/Gain and
the Acd Ped analyzers.
- Added the distribution of the mean, rms and reduced chisquare to the
output root file from the Cal Ped/Gain and the Acd Ped analyzers.
- Minor improvements to the plots appearance for the Cal Ped/Gain and the
Acd Ped analyzers.
- Added a switch to the Cal gain analyzer to get rid of the highest bin in
the left/right plots (unphysical spikes).
* Relevant jira(s): GDQMQ-215


*** v3r6p0 ***
- New feature implemented in the leftmost_edge algorithm. Now the sliding
window loop does not necessarily start from the first bin. A generic
x value can be set from the xml configuration file. This improves the speed a
lot and potentially makes the algorithms more stable.
* Relevant jira(s): GDQMQ-210


*** v3r5p0 ***
- Minor bug fix in alg__values and test function removed as it was broken.
- Exceptions taken into account when setting the output value in
alg__spikes_and_holes
- Exception violations put back in.
* Relevant jira(s): GDQMQ-188


*** v3r4p4 ***
- Update to pGlobal, added the number of channels per ACD cable
* Relevant jira(s): GDQMQ-1


*** v3r4p3 ***
- Minor improvement: errors not displayed for trending plots with no
associated errors (used to look as +- 0.000).


*** v3r4p2 ***
- Minor aesthetics change in pAlarmBaseAlgorithm---the algorithm names were
mispelled.
- Different way to associate the branch arrays to the relative errors in
alg__values; now it's more general and gracefully handles Hiro's trackermon
quantities---though it was not crashing before and gave the same number. It
essentially suppresses a ROOT warning.
- Cast to float in pAlarmiLimits.getBadness() added to prevent numpy to
return inf upon ZeroDivision error.
* Relevant jira(s): GDQMQ-206


*** v3r4p1 ***
- Minor bug fix.


*** v3r4p0 ***
- New alg__leftmost_edge_slices algorithm.
- Minor bug fix in alg__values.
- alg__x_min_bin_slices improved taking advantage of the improvements in the
base class since v3r3p0.
* Relevant jira(s): GDQMQ-52


*** v3r3p5 ***
- Threshold for the minimum TrueTimeInterval in alg__values changed from
1s to 5 s.
- Explanatory label added to the alarm handler xml output.


*** v3r3p4 ***
- Check on the TrueTimeInterval implemented to prevent the alarms on the
trending quantities from firing on tiny time bins.
- Fix for the DoubleDiffRate, which do not have associated errors in the tree.


*** v3r3p3 ***
- One more zero division error bug fix. And yes, different from the previous
tag. Hopefully the last one...
* Relevant jira(s): GDQMQ-204


*** v3r3p2 ***
- One more zero division error bug fix.
* Relevant jira(s): GDQMQ-204


*** v3r3p1 ***
- Bug fix in the spikes_and_holes alarm algorithm.
* Relevant jira(s): GDQMQ-202


*** v3r3p0 ***
- Error bars on the trending plots should be now correctly handled.
- More improvements in the alarm outputs.
* Relevant jira(s): GDQMQ-147


*** v3r2p1 ***
- Got the timestamp right for the alarms on the trending quantities.
- Improved formatting of error details.
- Exception mechanism implemented for the alarms on the trending quantities.
Also a partial bug fix related to the exceptions themselves.
* Relevant jira(s): GDQMQ-188


*** v3r2p0 ***
- Handling of the error bars in the alg__values algoruthm rolled back due to a
bug; need more work to have a functional version.
- Error representation for the trending quantities improved.
* Relevant jira(s): GDQMQ-57


*** v3r1p6 ***
- Now a pAlarm object is instantiated for each pAlarmSet object, even when
the corresponding ROOT object cannot be found in the file. The corresponding
output status is set to UNDEFINED and it appears in the summary. Usefull for
debug to make sure we don't screw up thing when messing around with the
variable names.
* Relevant jira(s): GDQMQ-159


*** v3r1p5 ***
- Debug message added in the ACD/CAL peds/gains fitting tool.
* Relevant jira(s): GDQMQ-65


*** v3r1p4 ***
- Bug fix in the ACD/CAL peds/gains fitting tool (check on a zero division
error)
* Relevant jira(s): GDQMQ-65


*** v3r1p3 ***
- Bug fix in the ACD/CAL peds/gains fitting tool (the fit is not performed
when there are no entries in a histogram).
* Relevant jira(s): GDQMQ-65


*** v3r1p2 ***
- Minor bug fix in the ACD/CAL peds/gains fitting tool (now if an histogram is
missing in the input file, the program issues an error instead of crashing).
* Relevant jira(s): GDQMQ-65


*** v3r1p1 ***
- Minor bug fix in the alarm postprocessing tool (wrong import).
- "_TH1" added to the postprocessing tool output histograms name, as requested
by Max.
* Relevant jira(s): GDM-27


*** v3r1p0 ***
- Added a post-processing tool to make distributions of the alarm outputs
(requires dataMonitoring/AlarmsCfg v1r1p0 or later).
* Relevant jira(s): GDM-27


*** v3r0p15 ***
- Added the plot of the chisquare probability into the fitting tool for CAL and
ACD pedestals/gains.
* Relevant jira(s): GDQMQ-65


*** v3r0p14 ***
- +-inf removed from the alarm limits.
* Relevant jira(s): GDM-80


*** v3r0p13 ***
- The set of tools for fitting ACD pedestals and CAL peds/gains is now in a
reasonable shape, with many improvements and bug fixes. Not yet in the
pipeline, so no change in the basic functionality at the moment.
* Relevant jira(s): GDQMQ-65


*** v3r0p12 ***

- More work done on the fitting tool for the CAL pedestals/gains. Some work
done on getting the normalization and rms values right for the modified
gaussian function. Not yet in the pipeline, so no change in the basic
functionality at the moment.
* Relevant jira(s): GDQMQ-65


*** v3r0p11 ***

- Bug fix in the alarm handler (a variable in pAlarmBaseAlgorithm was
referenced before assignment).
* Relevant jira(s): GDQMQ-78


*** v3r0p10 ***

- Handling of error bars into the alg__values algorithm.
* Relevant jira(s): GDQMQ-57


*** v3r0p9 ***

- New script for fitting cal pedestals and gain ratios at the end of the run,
if needed. Should have *no impact at all* on all the other pieces of code
already running in the pipeline.
* Relevant jira(s): GDQMQ-65


*** v3r0p8 ***

- Old script meant for comparing the FastMon plots to the corresponding digi
ones replaced with a new and better version. It writes an output xml
summary file.
* Relevant jira(s): GDQMQ-46


*** v3r0p7 ***

- Algorithm running on the trending root trees modified as to disable the
unused tree branches in each event loop. There's a 2.5 gain in processing time
on a standard digi file.


*** v3r0p6 ***

- doc/relese.notes removed (I know I messed up, here...)
* Relevant jira(s): GDQMQ-64


*** v3r0p5 ***

- doc/relese.notes moved to doc/release.notes
* Relevant jira(s): GDQMQ-64


*** v3r0p4 ***

- Some modification to the ACD tiles dimensions/rate correcting factors
(to be used in the alarms).
- Minor change in the way the alarm output status is evaluated (a >= and a <=
changed with a > and a < respectively). It affects only the bounduary
cases where the output value is right on one of the limits.
- Piece of code for calculating the cal gains added. Not yet used, though.
* Relevant jira(s): GDQMQ-48, GDQMQ-65


*** v3r0p3 ***

- New module for normalizing ACD quantities to tile position/area added.
It gets imported into pXmlBaseElement for being used by the alarm handler xml
parser, but there's no change in functionality at the moment.
* Relevant jira(s): GDQMQ-48


*** v3r0p2 ***

- release.notes added.
* Relevant jira(s): GDQMQ-64


*** v3r0p1 ***

- Couple of new algorithms for finding peaks added to the alarm handler.


*** v3r0p0 ***

- Baseline for the software freeze.
