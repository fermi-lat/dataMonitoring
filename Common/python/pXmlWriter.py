## @package pXmlWriter
## @brief Module providing utilities for writing xml files.


import pSafeLogger
logger = pSafeLogger.getLogger('pXmlWriter')

import sys
import os
import time

from pAsciiWriter import pAsciiWriter


class pXmlWriter(pAsciiWriter):

    PROLOG = '<?xml version="1.0" encoding="ISO-8859-15"?>'

    ## @brief Constructor.
    ## @param self
    #  The class instance.

    def __init__(self, outputFilePath = None):
        pAsciiWriter.__init__(self, outputFilePath)

    ## @brief Open an output xml file.
    ## @param self
    #  The class instance.
    ## @param outputFilePath
    #  The path to the output file.
    ## @param mode
    #  The file open mode.

    def openFile(self, outputFilePath, mode = 'w'):
        pAsciiWriter.openFile(self, outputFilePath, mode)
        self.writeLine(self.PROLOG)
        self.writeComment('Generated by pXmlWriter on %s.' % time.asctime())
        self.newLine()

    ## @brief Write a comment line.
    ## @param self
    #  The class instance.
    ## @param line
    #  The actual line.

    def writeComment(self, line):
        self.writeLine('<!-- %s -->' % line)

    ## @brief Return a formatted block opening a tag.
    ## @param self
    #  The class instance.
    ## @param tagName
    #  The tag name
    ## @param attributesDict
    #  A dictionary specifying the tag attributes (names and values).
    ## @param close
    #  If True (not the default), the tag is closed in the form <tag_name/>.

    def getOpenTagBlock(self, tagName, attributesDict = {}, close = False):
        block = '<%s' % tagName
        for (key, value) in attributesDict.items():
            block += ' %s="%s"' % (key, value)
        if not close:
            block += '>'
        else:
            block += '/>'
        return block

    ## @brief Return a formatted block closing a tag.
    ## @param self
    #  The class instance.
    ## @param tagName
    #  The tag name.    

    def getCloseTagBlock(self, tagName):
        return '</%s>' % tagName

    ## @brief Return a formatted full tag block.
    ## @param self
    #  The class instance.
    ## @param tagName
    #  The tag name
    ## @param attributesDict
    #  A dictionary specifying the tag attributes (names and values).
    ## @param value
    #  The tag value. By default it is None and the tag is closed in the
    #  form <tag_name/>.

    def getTagBlock(self, tagName, attributesDict = {}, value = None):
        if value is None:
            return self.getOpenTagBlock(tagName, attributesDict, True)
        else:
            return '%s%s%s' % (self.getOpenTagBlock(tagName, attributesDict),\
                               value, self.getCloseTagBlock(tagName))

    ## @brief Open a tag.
    ## @param self
    #  The class instance.
    ## @param tagName
    #  The tag name
    ## @param attributesDict
    #  A dictionary specifying the tag attributes (names and values).
    ## @param close
    #  If True (not the default), the tag is closed in the form <tag_name/>.

    def openTag(self, tagName, attributesDict = {}, close = False):
        self.writeLine(self.getOpenTagBlock(tagName, attributesDict, close))

    ## @brief Close a tag.
    ## @param self
    #  The class instance.
    ## @param tagName
    #  The tag name.

    def closeTag(self, tagName):
        self.writeLine(self.getCloseTagBlock(tagName))

    ## @brief Write a tag to the xml file.
    ## @param self
    #  The class instance.
    ## @param tagName
    #  The tag name
    ## @param attributesDict
    #  A dictionary specifying the tag attributes (names and values).
    ## @param value
    #  The tag value. By default it is None and the tag is closed in the
    #  form <tag_name/>.

    def writeTag(self, tagName, attributesDict, value = None):
        self.writeLine(self.getTagBlock(tagName, attributesDict, value))



if __name__ == '__main__':
    writer = pXmlWriter('xml_test.xml')
    writer.openTag('alarmSummary')
    writer.indent()
    writer.writeTag('parameter', {'name': 'test', 'value': 3})
    writer.writeTag('output', {}, 10)
    writer.backup()
    writer.closeTag('alarmSummary')
    writer.closeFile()
