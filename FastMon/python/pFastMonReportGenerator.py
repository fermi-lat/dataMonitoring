#! /bin/env python

## @package pTestReportGenerator
## @brief Package for generating test reports.

import pSafeLogger
logger = pSafeLogger.getLogger('pFastMonReportGenerator')

import os
import sys
import commands
import time

from pXmlParser           import pXmlParser
from pBaseReportGenerator import pBaseReportGenerator
from pSafeROOT            import ROOT
from pRootFileManager     import pRootFileManager


class pFastMonReportGenerator(pBaseReportGenerator):

    MAIN_PAGE_TITLE = 'Fast monitor report'
    REPORT_AUTHOR   = 'Automatically generated by pDataProcessor.py'

    def __init__(self, dataProcessor):
        self.DataProcessor = dataProcessor
        reportDirPath = dataProcessor.OutputFilePath.replace('.root','.report')
        pBaseReportGenerator.__init__(self, reportDirPath)
        self.RootFileManager = pRootFileManager()

    ## @brief Produce the report in html, ps and pdf formats.
    ## @param self
    #  The class instance.

    def run(self, verbose = False, compileLaTeX = True):
        logger.info('Writing doxygen report files...')
        startTime = time.time()
        rootFilePath = self.DataProcessor.TreeProcessor.OutputFilePath
        self.RootFileManager.openFile(rootFilePath)
        self.openReport()
        self.fillMainPage()
        self.addErrorSummary()
        self.addErrorDetails()
        self.createAuxRootCanvas(True, verbose)
        self.addPlots()
        self.deleteAuxRootCanvas()
        self.closeReport()
        self.RootFileManager.closeFile()
        logger.info('Done in %.2f s.\n' % (time.time() - startTime))
        self.compileReport(verbose, compileLaTeX)

    def fillMainPage(self):
        self.addSection('main_summary', 'Summary')
        self.write('%d event(s) processed in %.2f seconds.' %\
                   (self.DataProcessor.NumEvents,\
                    self.DataProcessor.StopTime -\
                    self.DataProcessor.StartTime))
        self.newline()
        self.write('There are %d error(s) in %d error event(s).' %\
                   (self.DataProcessor.ErrorHandler.getNumErrors(),
                    self.DataProcessor.ErrorHandler.getNumErrorEvents()))
        self.newline()
        self.write('@n Look at the related pages for details.')

    ## @brief Add all the plots to the test report.
    ## @param self
    #  The class instance.
    
    def addPlots(self):
        for list in self.DataProcessor.XmlParser.OutputListsDict.values():
            if list.Enabled:
                self.addPlotsList(list)

    def addErrorSummary(self):
        pageLabel = 'error_summary'
        pageTitle = 'Error handler summary'
        self.addPage(pageLabel, pageTitle)
        self.newline(pageLabel)
        self.write('Here is the number of errors found in the run ' +\
                   '(indexed by error code)', pageLabel)
        self.newline(pageLabel)
        dictionary = self.DataProcessor.ErrorHandler.ErrorCountsDict
        if len(dictionary):
            self.addDictionary('Summary by error code', dictionary, pageLabel)
        else:
            self.write('No error(s) found in this run.', pageLabel)

    def addErrorDetails(self):
        pageLabel = 'error_details'
        pageTitle = 'Error handler details'
        self.addPage(pageLabel, pageTitle)
        self.newline(pageLabel)
        self.write('Here is the detailed list of events with error(s)',\
                   pageLabel)
        self.newline(pageLabel)
        dictionary = self.DataProcessor.ErrorHandler.ErrorEventsDict
        if (len(dictionary)):
            for (eventNumber, errorEvent) in dictionary.items():
                self.addDictionary('Event %d' % eventNumber,\
                                   errorEvent.getErrorsDict(), 'error_details')
        else:
            self.write('No error(s) found in this run.', pageLabel)


        

if __name__ == '__main__':
    sys.exit('Not implemented, yet. Try using pReportGenerator.py')

