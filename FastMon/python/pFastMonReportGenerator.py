#! /bin/env python

## @package pTestReportGenerator
## @brief Package for generating test reports.

import pSafeLogger
logger = pSafeLogger.getLogger('pFastMonReportGenerator')

import os
import sys
import commands
import time

from pXmlParser           import pXmlParser
from pBaseReportGenerator import pBaseReportGenerator
from pSafeROOT            import ROOT
from pRootFileManager     import pRootFileManager


class pFastMonReportGenerator(pBaseReportGenerator):

    MAIN_PAGE_TITLE = 'Fast monitor report'
    REPORT_AUTHOR   = 'Automatically generated by pDataProcessor.py'

    def __init__(self, dataProcessor):
        self.DataProcessor = dataProcessor
        reportDirPath = os.path.join(dataProcessor.OutputDirPath, 'report')
        pBaseReportGenerator.__init__(self, reportDirPath)
        self.RootFileManager = pRootFileManager()

    ## @brief Produce the report in html, ps and pdf formats.
    ## @param self
    #  The class instance.

    def run(self, verbose = False, compileLaTeX = True):
        logger.info('Writing doxygen report files...')
        startTime = time.time()
        rootFilePath = self.DataProcessor.TreeProcessor.OutputFilePath
        self.RootFileManager.openFile(rootFilePath)
        self.openReport()
        self.fillMainPage()
        self.addErrorSummary()
        self.addErrorDetails()
        self.createAuxRootCanvas(True, verbose)
        self.addPlots()
        self.deleteAuxRootCanvas()
        self.closeReport()
        self.RootFileManager.closeFile()
        logger.info('Done in %.2f s.\n' % (time.time() - startTime))
        self.compileReport(verbose, compileLaTeX)

    def fillMainPage(self):
        self.addSection('main_summary', 'Summary')
        self.write('%d event(s) processed in %.2f seconds.' %\
                   (self.DataProcessor.NumEvents,\
                    self.DataProcessor.StopTime -\
                    self.DataProcessor.StartTime))
        self.newline()
        self.write('There are %d error(s) in %d error event(s).' %\
                   (self.DataProcessor.ErrorHandler.getNumErrors(),
                    self.DataProcessor.ErrorHandler.getNumErrorEvents()))
        self.newline()
        self.write('@n Look at the related pages for details.')

    ## @brief Add a plot to the doxygen main page file.
    ## @todo There's room for improvements, here (in particular one
    #  could write a method in pXmlPlotRep to return a list of plot reps
    #  for all the levels - with their names, titles, etc - and avoid
    #  the name parameter in this function).
    ## @param self
    #  The class instance.
    ## @param plotRep
    #  The pXmlPlotRep object representing the plot.
    ## @param name
    #  The plot name (needs to be passed because it may be different for all
    #  the towers/layers).
    
    def addPlot(self, plotRep, name, pageLabel):
        rootObject = self.RootFileManager.get(name)
        if rootObject is not None:
            self.addRootObject(rootObject, plotRep.Title, plotRep.Caption,\
                               plotRep.DrawOptions, plotRep.XLog,\
                               plotRep.YLog, pageLabel)

    ## @brief Add all the plots to the test report.
    ## @param self
    #  The class instance.
    
    def addPlots(self):
        for list in self.DataProcessor.XmlParser.OutputListsDict.values():
            if list.Enabled:
                self.addPlotsList(list)

    def addPlotsList(self, list):
        pageLabel = 'list_%s' % list.Name.replace(' ', '_')
        pageTitle = '%s plots list' % list.Name
        self.addPage(pageLabel, pageTitle)
        for plotRep in list.EnabledPlotRepsDict.values():
            for name in plotRep.getRootObjectsName():
                self.addPlot(plotRep, name, pageLabel)

    def addErrorSummary(self):
        pageLabel = 'error_summary'
        pageTitle = 'Error handler summary'
        self.addPage(pageLabel, pageTitle)
        self.newline(pageLabel)
        self.write('Here is the number of errors found in the run ' +\
                   '(indexed by error code)', pageLabel)
        self.newline(pageLabel)
        dictionary = self.DataProcessor.ErrorHandler.ErrorCountsDict
        if len(dictionary):
            self.addDictionary('Summary by error code', dictionary, pageLabel)
        else:
            self.write('No error(s) found in this run.', pageLabel)

    def addErrorDetails(self):
        pageLabel = 'error_details'
        pageTitle = 'Error handler details'
        self.addPage(pageLabel, pageTitle)
        self.newline(pageLabel)
        self.write('Here is the detailed list of events with error(s)',\
                   pageLabel)
        self.newline(pageLabel)
        dictionary = self.DataProcessor.ErrorHandler.ErrorEventsDict
        if (len(dictionary)):
            for (eventNumber, errorEvent) in dictionary.items():
                self.addDictionary('Event %d' % eventNumber,\
                                   errorEvent.getErrorsDict(), 'error_details')
        else:
            self.write('No error(s) found in this run.', pageLabel)


        

if __name__ == '__main__':
    sys.exit('Not implemented, yet. Sorry...')
    from optparse import OptionParser
    parser = OptionParser(usage='usage: %prog [options] data_file')
    parser.add_option('-c', '--config-file', dest='config_file',\
                      default=None, type=str,   \
                      help='path to the input xml configuration file')
    parser.add_option('-d', '--report-dir', dest='report_dir', type=str,
                      default=None, help='path to the output report directory')
    parser.add_option('-f', '--force-overwrite', action='store_true',
                      dest='force_overwrite', default=False,
                      help='overwrite existing files without asking')
    parser.add_option('-e', '--errors-file', dest='errors_file',\
                      default=None, type=str,   \
                      help='path to the event errors file')
    parser.add_option('-a', '--alarms-file', dest='alarms_file',\
                      default=None, type=str,   \
                      help='path to the alarm handler file')
    parser.add_option('-v', '--verbose', action='store_true',
                      dest='verbose', default=False,
                      help='print a lot of ROOT/doxygen/LaTeX related stuff')
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        parser.error('incorrect number of arguments.')
        sys.exit()

    xmlParser = pXmlParser(options.config_file)
    reportGenerator = pFastMonReportGenerator(xmlParser, args[0],
                                           options.errors_file,
                                           options.alarms_file,
                                           options.report_dir,
                                           options.force_overwrite,
                                           options.verbose)
    reportGenerator.run()
