#! /bin/env python

## @package pTestReportGenerator
## @brief Package for generating test reports.


import os
import sys
import logging
import pConfig
import ROOT
import commands
import time

from pXmlParser import pXmlParser
from pBaseReportGenerator import pBaseReportGenerator


class pFastMonReportGenerator(pBaseReportGenerator):

    MAIN_PAGE_TITLE = 'Fast monitor report'

    def __init__(self, xmlParser, inputRootFilePath, inputErrorsFilePath=None,\
                 inputAlarmsFilePath=None, outputDirPath=None, verbose=False):
        if outputDirPath is None:
            outputDirPath = inputRootFilePath.replace('.root', '_report')
        pBaseReportGenerator.__init__(self, outputDirPath,\
                                      self.MAIN_PAGE_TITLE,\
                                      forceOverwrite = True)
        self.__XmlParser           = xmlParser
        self.__InputRootFilePath   = inputRootFilePath
        self.__InputErrorsFilePath = inputErrorsFilePath
        if self.__InputErrorsFilePath is None:
            self.__InputErrorsFilePath =\
                 self.__InputRootFilePath.replace('_processed.root', '.errors')
        self.__InputAlarmsFilePath = inputAlarmsFilePath
        if self.__InputAlarmsFilePath is None:
            self.__InputAlarmsFilePath =\
                 self.__InputRootFilePath.replace('.root', '.alarms')
        self.__Verbose         = verbose
        self.InputRootFile     = None
        self.fuckRoot()

    def openReport(self):
        author = 'Automatically generated by pDataProcessor.py'
        pBaseReportGenerator.openReport(self, author)

    ## @brief This function is intended to fool ROOT...
    #
    #  If a valid folder path is passed as one of the arguments to the
    #  python script, ROOT cd into it the first time ROOT itself is called.
    #
    #  By the way... we set the ROOT.gStyle palette here!
    ## @brief self
    #  The class instance.

    def fuckRoot(self):
        currentDirPath = os.path.abspath(os.curdir)
        ROOT.gStyle.SetPalette(self.ROOT_PALETTE)
        os.chdir(currentDirPath)

    ## @brief Produce the report in html, ps and pdf formats.
    ## @param self
    #  The class instance.

    def run(self):
        self.writeReport()
        self.compileReport()

    ## @brief Open the ROOT input TFile object containing the plots.
    ## @param self
    #  The class instance.

    def __openInputRootFile(self):
        rootFile = ROOT.TFile(self.__InputRootFilePath)
        if rootFile.GetFd() != -1:
            return rootFile
        else:
            sys.exit('Could not open input ROOT file %s. Aborting...' %\
                     self.__InputRootFilePath)

    ## @brief Add all the plots to the test report.
    ## @param self
    #  The class instance.
    
    def addPlots(self):
        self.createAuxRootCanvas()
        if not self.__Verbose:
            guard = ROOT.TRedirectOutputGuard('/dev/null', 'w')
        for list in self.__XmlParser.OutputListsDict.values():
            if list.Enabled:
                self.addOutputListSection(list)
                for plotRep in list.EnabledPlotRepsDict.values():
                    for name in plotRep.getRootObjectsName():
                        self.addPlot(plotRep, name)
        self.deleteAuxRootCanvas()
        
    ## @brief Add a section corresponding to a particular output list
    #  to the doxygen main page file.
    ## @param self
    #  The class instance.
    ## @param list
    #  The pXmlOutputList object.

    def addOutputListSection(self, list):
        name  = list.Name
        label = name.replace(' ', '_')
        self.addSection(label, name)

    ## @brief Write the actual doxygen files.
    ## @param self
    #  The class instance.
    
    def writeReport(self):
        logging.info('Writing doxygen report files...')
        startTime = time.time()
        self.InputRootFile = self.__openInputRootFile()
        self.openReport()
        self.addPlots()
        self.closeReport()
        self.InputRootFile.Close()
        logging.info('Done in %s s.\n' % (time.time() - startTime))



        

if __name__ == '__main__':
    from optparse import OptionParser
    parser = OptionParser(usage='usage: %prog [options] data_file')
    parser.add_option('-c', '--config-file', dest='config_file',\
                      default=None, type=str,   \
                      help='path to the input xml configuration file')
    parser.add_option('-d', '--report-dir', dest='report_dir', type=str,
                      default=None, help='path to the output report directory')
    parser.add_option('-f', '--force-overwrite', action='store_true',
                      dest='force_overwrite', default=False,
                      help='overwrite existing files without asking')
    parser.add_option('-e', '--errors-file', dest='errors_file',\
                      default=None, type=str,   \
                      help='path to the event errors file')
    parser.add_option('-a', '--alarms-file', dest='alarms_file',\
                      default=None, type=str,   \
                      help='path to the alarm handler file')
    parser.add_option('-v', '--verbose', action='store_true',
                      dest='verbose', default=False,
                      help='print a lot of ROOT/doxygen/LaTeX related stuff')
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        parser.error('incorrect number of arguments.')
        sys.exit()

    xmlParser = pXmlParser(options.config_file)
    reportGenerator = pFastMonReportGenerator(xmlParser, args[0],
                                           options.errors_file,
                                           options.alarms_file,
                                           options.report_dir,
                                           options.force_overwrite,
                                           options.verbose)
    reportGenerator.run()

