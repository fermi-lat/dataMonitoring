#! /bin/env python

import pSafeLogger
logger = pSafeLogger.getLogger('pReportGenerator')

from pRootFileManager     import pRootFileManager
from pBaseReportGenerator import pBaseReportGenerator
from pErrorHandler        import pErrorHandler

import time

class pReportGenerator(pBaseReportGenerator):

    MAIN_PAGE_TITLE = 'Report Generator'
    REPORT_AUTHOR   = 'Automatically generated by pReportGenerator.py'
    
    def __init__(self, errorHandler, xmlParser, rootFilePath):
        self.ErrorHandler = errorHandler
        
        self.XmlParser = xmlParser
        self.RootFilePath  = rootFilePath
        reportDirPath = self.RootFilePath.replace('.root', '.report')
        pBaseReportGenerator.__init__(self, reportDirPath)
        self.RootFileManager = pRootFileManager()

    def run(self, verbose = False):
        logger.info('Writing doxygen report files...')
        startTime = time.time()
        self.RootFileManager.openFile(self.RootFilePath)
        self.openReport()
        self.fillMainPage()
        self.addErrors()
        self.createAuxRootCanvas(True, verbose)
        self.addPlots()
        self.deleteAuxRootCanvas()
        self.closeReport()
        self.RootFileManager.closeFile()
        logger.info('Done in %.2f s.\n' % (time.time() - startTime))
        self.compileReport(verbose)
        
    def fillMainPage(self):
        self.addSection('main_summary', 'Summary')
        self.write('@n Look at the related pages for details.')

    def addPlots(self):
        for list in self.XmlParser.OutputListsDict.values():
            if list.Enabled:
                self.addPlotsList(list)

    def addErrors(self):
        errorFileName = self.RootFilePath.replace('processed.root', 'errors.pickle')
        try:
            self.ErrorHandler.load(errorFileName)
        except:
            logger.error('Could not find file %s.'% errorFileName +\
                         'The report will not contain the errors if any.')
            return None
        self.addErrorSummary()
        self.addErrorDetails()

    def addErrorSummary(self):
        pageLabel = 'error_summary'
        pageTitle = 'Error handler summary'
        self.addPage(pageLabel, pageTitle)
        self.newline(pageLabel)
        self.write('Here is the number of errors found in the run ' +\
                   '(indexed by error code)', pageLabel)
        self.newline(pageLabel)
        dictionary = self.ErrorHandler.ErrorCountsDict
        if len(dictionary):
            self.addDictionary('Summary by error code', dictionary, pageLabel)
        else:
            self.write('No error(s) found in this run.', pageLabel)

    def addErrorDetails(self):
        pageLabel = 'error_details'
        pageTitle = 'Error handler details'
        self.addPage(pageLabel, pageTitle)
        self.newline(pageLabel)
        self.write('Here is the detailed list of events with error(s)',\
                   pageLabel)
        self.newline(pageLabel)
        dictionary = self.ErrorHandler.ErrorEventsDict
        if (len(dictionary)):
            for (eventNumber, errorEvent) in dictionary.items():
                self.addDictionary('Event %d' % eventNumber,\
                                   errorEvent.getErrorsDict(), 'error_details')
        else:
            self.write('No error(s) found in this run.', pageLabel)



if __name__ == '__main__':
    from pXmlParser import pXmlParser
    from pOptionParser import pOptionParser
    optparser = pOptionParser('cvLV',1,1,False)

    xmlParser = pXmlParser(optparser.Options.c)
    errorHandler    = pErrorHandler()
    reportGenerator = pReportGenerator(errorHandler, xmlParser, optparser.Argument)
    reportGenerator.run(optparser.Options.v)
    if optparser.Options.V:
        reportGenerator.viewReport()
