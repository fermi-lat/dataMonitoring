 + implement cal log iterator
 + ACD iterator
 + OSW Iterator
 + Gem Discarded Time ?
 + timeIntervalElapsed - deltaEventTime - zoom - rollover 
 + EPU - crate number  = meta.context().open().crate()
 + Histograms : Level Layer
 + Think about autoscale (move root object creation to the TreeProcessor?)
 + each stripchart name needs to be unique
 + add XY axis title in xml

 + PLOTS
   + Trigger Word calculated by triggerAlg ? (cal_le vector ???)
   + Trigger Rate : EventNumber, OSWtimeContribution::evtSequence ???
   + Trigger Rate : just a binned representation of time_stamp, but need good
   timestamp, not restricted to 128s !!!
   + gem_live_time : unit ?
   + periodic trigger : gem_condition_summary bit 5
   + CUTs required
     #Project(const char* hname, const char* varexp, const char* selection = "", Option_t* option = "", Long64_t nentries = 1000000000, Long64_t firstentry = 0)
   + automatic consistency check

 + CAL plots
   + LAT Hit map: Integrated Hit Count per Log -> array(8*4 layers, 12*4 columns)
   + LAT Hit map per range: Integrated Hit Count per Log per Range -> 4 * array(8*4 layers, 12*4 columns)

   + !DONE! Number of logs hit per event  
   + !DONE! Number of logs hit per event per tower when at least 1 log hit 
   + !DONE! Number of Towers with at least 1 log hit

   + !DONE! Trendind of average number of logs hit per event 
   + !DONE! Trending of average number of logs hit per tower when at least 1 one log hit in the tower
   + !DONE! Trending of average Number of Towers with at least 1 log hit

   + Trending of CAL_LO trigger rate for the LAT
   + Trending of CAL_LO trigger rate per Tower (same plot ?)
   + Trending of CAL_HI trigger rate for the LAT
   + Trending of CAL_HI trigger rate per Tower (same plot ?)
